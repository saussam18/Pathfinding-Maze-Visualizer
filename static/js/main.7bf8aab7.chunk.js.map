{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/Algorithims/Dijkstra.js","PathfindingVisualizer/Algorithims/A*.js","PathfindingVisualizer/Algorithims/BFS.js","PathfindingVisualizer/Algorithims/DFS.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isVisited","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sort","nodeA","nodeB","closestNode","shift","Infinity","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","astar","totalDistance","console","log","target","heuristic","manhattanDistance","Math","abs","unshift","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","vistedNodesInOrder","currentNode","getNodesInShortestPathOrder","animateDijkstra","getNodesInShortestPath","bfs","getNodesInShortestPathBFS","pop","dfs","getNodesInShortestPathDFS","j","onClick","visualizeDijkstra","visualizeAstar","visualizeBFS","visualizeDFS","clearGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bf8aab7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      isVisited,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isVisited\n      ? \"node-visited\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n\n    if (closestNode === Infinity) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvistedNodes) {\n  unvistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function astar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  startNode.totalDistance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    console.log(closestNode.totalDistance);\n    if (closestNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction updateUnvisitedNeighbors(node, grid, target) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.heuristic = manhattanDistance(neighbor, target);\n    neighbor.totalDistance = neighbor.heuristic + neighbor.distance;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction manhattanDistance(nodeA, nodeB) {\n  const x = Math.abs(nodeA.row - nodeB.row);\n  const y = Math.abs(nodeA.col - nodeB.col);\n  return x + y;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction sortNodesByDistance(unvistedNodes) {\n  unvistedNodes.sort(\n    (nodeA, nodeB) => nodeA.totalDistance - nodeB.totalDistance\n  );\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  const unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length) {\n    const currentNode = unvisitedNodes.shift();\n\n    if (currentNode.isWall) continue;\n\n    if (currentNode === Infinity) return visitedNodesInOrder;\n\n    currentNode.isVisited = true;\n    visitedNodesInOrder.push(currentNode);\n\n    if (currentNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(currentNode, grid, unvisitedNodes);\n  }\n  return false;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.isVisited = true;\n    neighbor.previousNode = node;\n    unvisitedNodes.push(neighbor);\n  }\n\n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n}\n\nexport function getNodesInShortestPathBFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  const unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length) {\n    const currentNode = unvisitedNodes.pop();\n\n    if (currentNode.isWall) continue;\n\n    if (currentNode === Infinity) return visitedNodesInOrder;\n\n    currentNode.isVisited = true;\n    visitedNodesInOrder.push(currentNode);\n    if (currentNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(currentNode, grid, unvisitedNodes);\n  }\n  return false;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.previousNode = node;\n    unvisitedNodes.push(neighbor);\n  }\n\n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row < grid.length - 1) neighbors.unshift(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.unshift(grid[row][col + 1]);\n    if (row > 0) neighbors.unshift(grid[row - 1][col]);\n    if (col > 0) neighbors.unshift(grid[row][col - 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n}\n\nexport function getNodesInShortestPathDFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\n\nimport \"./PathfindingVisualizer.css\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./Algorithims/Dijkstra\";\nimport { astar, getNodesInShortestPath } from \"./Algorithims/A*\";\nimport { bfs, getNodesInShortestPathBFS } from \"./Algorithims/BFS\";\nimport { dfs, getNodesInShortestPathDFS } from \"./Algorithims/DFS\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node.isStart && !node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const vistedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(vistedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeAstar() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const vistedNodesInOrder = astar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n    this.animateDijkstra(vistedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const vistedNodesInOrder = bfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathBFS(finishNode);\n    this.animateDijkstra(vistedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeDFS() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const vistedNodesInOrder = dfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathDFS(finishNode);\n    this.animateDijkstra(vistedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  /*clearPath() {\n    const { grid } = this.state;\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        const node = grid[i][j];\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node\";\n          node.isVisited = false;\n        } else if (node.isStart) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-start\";\n        } else if (node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish\";\n        } else if (node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }\n      }\n    }\n  }*/\n\n  clearGrid() {\n    const grid = getInitialGrid();\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        const node = grid[i][j];\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node\";\n        } else if (node.isStart) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-start\";\n        } else if (node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish\";\n        }\n      }\n    }\n    this.setState({ grid });\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <>\n        <div className=\"header\">\n          <h1>Pathfinding Algorithm Visualizer</h1>\n          <h4 className=\"sub\"> By Sam Sausville </h4>\n          <button className=\"button\" onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n          </button>\n          <div className=\"divider\" />\n          <button className=\"button\" onClick={() => this.visualizeAstar()}>\n            Visualize A* Algorithm\n          </button>\n          <div className=\"divider\" />\n          <button className=\"button\" onClick={() => this.visualizeBFS()}>\n            Visualize Breadth-First Search\n          </button>\n          <div className=\"divider\" />\n          <button className=\"button\" onClick={() => this.visualizeDFS()}>\n            Visualize Depth-First Search\n          </button>\n          <div className=\"divider\" />\n          <button className=\"button\" onClick={() => this.clearGrid()}>\n            Clear Grid\n          </button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 21; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    totalDistance: Infinity,\n    heuristic: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (node.isStart || node.isFinish) {\n    return grid;\n  }\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}